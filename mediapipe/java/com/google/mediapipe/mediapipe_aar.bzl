"""Generate MediaPipe AAR including different variants of .so in jni folder.

Usage:

Define a mediapipe_aar rule in a BUILD file within the MediaPipe repo. For example,
putting the following code into mediapipe/examples/android/aar_demo/BUILD.

```
load("//mediapipe/java/com/google/mediapipe:mediapipe_aar.bzl", "mediapipe_aar")

mediapipe_aar(
    name = "my_aar",
    calculators = ["//mediapipe/calculators/core:pass_through_calculator"],
)
```

Then, run the following Bazel command to generate the AAR.

```
$ bazel build -c opt --fat_apk_cpu=arm64-v8a,armeabi-v7a mediapipe/examples/android/aar_demo:my_aar
```

Finally, import the AAR into Android Studio.

"""

load("@build_bazel_rules_android//android:rules.bzl", "android_binary", "android_library")

def mediapipe_aar(name, calculators = []):
    """Generate MediaPipe AAR.

    Args:
      name: the name of the AAR.
      calculators: the calculator libraries to be compiled into the .so.
    """
    native.cc_binary(
        name = "libmediapipe_jni.so",
        linkshared = 1,
        linkstatic = 1,
        deps = [
            "//mediapipe/java/com/google/mediapipe/framework/jni:mediapipe_framework_jni",
        ] + calculators,
    )

    native.cc_library(
        name = "mediapipe_jni_lib",
        srcs = [":libmediapipe_jni.so"],
        alwayslink = 1,
    )

    native.genrule(
        name = name + "_aar_manifest_generator",
        outs = ["AndroidManifest.xml"],
        cmd = """
cat > $(OUTS) <<EOF
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.google.mediapipe">
    <uses-sdk
        android:minSdkVersion="21"
        android:targetSdkVersion="27" />
    <application />
</manifest>
""",
    )

    native.genrule(
        name = name + "_calculator_proto_java_src_generator",
        srcs = [
            "//mediapipe/framework:protos_src",
            "@com_google_protobuf_javalite//:well_known_protos",
        ],
        outs = ["CalculatorProto.java"],
        cmd = "$(location @com_google_protobuf_javalite//:protoc) " +
              "--plugin=protoc-gen-javalite=$(location @com_google_protobuf_javalite//:protoc_gen_javalite) " +
              "--proto_path=. --proto_path=$(GENDIR) " +
              "--proto_path=$$(pwd)/external/com_google_protobuf_javalite/src " +
              "--javalite_out=$$(dirname $(location CalculatorProto.java)) mediapipe/framework/calculator.proto && " +
              "mv $$(dirname $(location CalculatorProto.java))/com/google/mediapipe/proto/CalculatorProto.java $$(dirname $(location CalculatorProto.java))",
        tools = [
            "@com_google_protobuf_javalite//:protoc",
            "@com_google_protobuf_javalite//:protoc_gen_javalite",
        ],
    )

    android_library(
        name = name + "_android_lib",
        srcs = [
            "//mediapipe/java/com/google/mediapipe/components:java_src",
            "//mediapipe/java/com/google/mediapipe/framework:java_src",
            "//mediapipe/java/com/google/mediapipe/glutil:java_src",
            "CalculatorProto.java",
        ],
        manifest = "AndroidManifest.xml",
        proguard_specs = ["//mediapipe/java/com/google/mediapipe/framework:proguard.pgcfg"],
        deps = [
            ":mediapipe_jni_lib",
            "//mediapipe/framework:calculator_java_proto_lite",
            "//mediapipe/framework:calculator_profile_java_proto_lite",
            "//mediapipe/framework/tool:calculator_graph_template_java_proto_lite",
            "//third_party:androidx_annotation",
            "//third_party:androidx_appcompat",
            "//third_party:androidx_core",
            "//third_party:androidx_legacy_support_v4",
            "//third_party:camerax_core",
            "//third_party:camera2",
            "@com_google_code_findbugs//jar",
            "@com_google_common_flogger//jar",
            "@com_google_common_flogger_system_backend//jar",
            "@com_google_guava_android//jar",
            "@androidx_lifecycle//jar",
        ],
    )

    aar_with_jni(name, name + "_android_lib")

def aar_with_jni(name, android_library):
    # Generate dummy AndroidManifest.xml for dummy apk usage
    # (dummy apk is generated by <name>_dummy_app target below)
    native.genrule(
        name = name + "_binary_manifest_generator",
        outs = [name + "_generated_AndroidManifest.xml"],
        cmd = """
cat > $(OUTS) <<EOF
<manifest
  xmlns:android="http://schemas.android.com/apk/res/android"
  package="dummy.package.for.so">
  <uses-sdk android:minSdkVersion="21"/>
</manifest>
EOF
""",
    )

    # Generate dummy apk including .so files.
    # We extract out .so files and throw away the apk.
    android_binary(
        name = name + "_dummy_app",
        manifest = name + "_generated_AndroidManifest.xml",
        custom_package = "dummy.package.for.so",
        deps = [android_library],
    )

    native.genrule(
        name = name,
        srcs = [android_library + ".aar", name + "_dummy_app_unsigned.apk"],
        outs = [name + ".aar"],
        tags = ["manual"],
        cmd = """
cp $(location {}.aar) $(location :{}.aar)
chmod +w $(location :{}.aar)
origdir=$$PWD
cd $$(mktemp -d)
unzip $$origdir/$(location :{}_dummy_app_unsigned.apk) "lib/*"
cp -r lib jni
zip -r $$origdir/$(location :{}.aar) jni/*/*.so
""".format(android_library, name, name, name, name),
    )
